#include <Arduino.h>
// Version 3.0 - Dual Shift Support with Named Shifts

#include <Wire.h>
#include <RTClib.h>
#include <EEPROM.h>

#include <Adafruit_GFX.h>
#define SSD1306_NO_SPLASH 1
#include <Adafruit_SSD1306.h>

#include <BluetoothSerial.h>
#include <WiFi.h>

// May 1,2025 -- To support MQTT server
#include <PubSubClient.h>
// #include <ArduinoJson.h>

// // Added on June 1,2025 -- To sync datetime with NTP server
// #include <NTPClient.h>
// #include <WiFiUdp.h>

// WiFiUDP ntpUDP;
// // By default 'pool.ntp.org' is used with 60 seconds update interval and
// // no offset
// NTPClient timeClient(ntpUDP);
// // Variables to save date and time
// String formattedDate;
// String dayStamp;
// String timeStamp;

#include "time.h"
const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600*7; // Example: +7 hour for Central European Time
const int   daylightOffset_sec = 0; // Example: +1 hour for Daylight Saving Time

BluetoothSerial SerialBT;

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

RTC_DS3231 rtc;
bool rtcAvailable = true;

#define ENGINE_INPUT_PIN 15
#define LED_PIN 25
#define CHECK_ENGINE_INPUT_PIN 12//DISPLAY_MODE_INPUT_PIN

#define EEPROM_SIZE 512
#define NAME_ADDR 0
#define ENGINE_HOURS_ADDR 16
#define SHIFT1_CUTOFF_ADDR 20
#define SHIFT2_CUTOFF_ADDR 21
#define SHIFT1_HOUR_ADDR 22
#define SHIFT2_HOUR_ADDR 26
#define LAST_SHIFT_RESET_DAY_ADDR 30 //Not used
#define SHIFT1_NAME_ADDR 31
#define SHIFT2_NAME_ADDR 41

#define MAX_NAME_LENGTH 10

#define LAST_SHIFT1_RESET_DAY_ADDR 52  // 1 byte (day of last reset for shift 1)
#define LAST_SHIFT2_RESET_DAY_ADDR 53  // 1 byte (day of last reset for shift 2)

#define SSID_ADDR 60
#define PASS_ADDR 110

// To support Move
#define TOTAL_MOVE_ADDR	170
#define SHIFT_MOVE1_ADDR	174
#define SHIFT_MOVE2_ADDR	178
#define MOVE_INPUT_PIN 14
// #define DEBOUNCE_DELAY_MS   50  // adjust if needed

// To support MTTQ server
#define EEPROM_SERVER_ADDR   200
#define MAX_SERVER_LEN       32
String mqttServer = "192.168.1.100:1883"; // default
// End MTTQ

// bool lastMoveButtonState = LOW;
// unsigned long lastDebounceTime = 0;
// bool moveButtonState = LOW;

#define LED_FLASH_DURATION 200  // milliseconds
bool flashActive = false;
unsigned long flashStartTime = 0;
// End move

const int EEPROM_ADDR_INTERVAL = 51;
unsigned long SAVE_INTERVAL = 10 * 60 * 1000UL; // Default 10 minutes

const unsigned long DISPLAY_UPDATE_INTERVAL = 1000;

String engine_name = "";
bool engineRunning = false;
unsigned long engineStartTime = 0;
unsigned long lastSaveTime = 0;
unsigned long lastDisplayUpdate = 0;
float totalEngineHours = 0;
float shift1Hours = 0;
float shift2Hours = 0;
uint8_t shift1Cutoff = 8;
uint8_t shift2Cutoff = 20;
int lastShiftResetDay = -1;
String shift1Name = "Shift1";
String shift2Name = "Shift2";

bool wasEngineRunning = false;

int lastShift1ResetDay = -1;
int lastShift2ResetDay = -1;

// Move
int totalMoves = 0;
int shiftMove1 = 0;
int shiftMove2 = 0;
// End move

int lastShiftIndex = -1;


// Start MTTQ
WiFiClient espClient;
PubSubClient mqttClient(espClient);  // <-- declare here
const char* mqttIp = "127.0.0.1";
const int mqttPort = 1883;

unsigned long lastMQTTSendTime = 0;
unsigned long mqttSendInterval = 5*60*1000; // default 5 minutes
// End MTTQ

bool alertDisplay = false; //Show Normal mode(Engine hour) or Alert mode (check engine,Batt,PM)
int engine_check = 0; //IN case found Check Engine alram set to 1

String alertMsg = "";
bool isPm = false;
bool isCheckEngine = false;
bool isChargeFail = false;
bool isLifting = false;

// Constants
#define EEPROM_MIN_ACTIVE_ADDR 300  // Choose an unused EEPROM address
#define DEBOUNCE_DELAY_MS 50     // Debounce time
#define MIN_ACTIVE_MS 10000        // Minimum time the input must stay HIGH to count (configurable)

// State variables
unsigned int minActiveMs = 10000;         // Default value 10 Sec
bool moveButtonState = LOW;             // Current stable state
bool lastMoveButtonState = LOW;         // Previous raw reading
unsigned long lastDebounceTime = 0;     // For debouncing
unsigned long highStartTime = 0;        // When HIGH state started
bool highStable = false;                // Track if HIGH was stable long enough


// Added on May 20,2025 -- To fix large number of Hour (long)
#define EEPROM_ADDR_TOTAL_MINUTES 310  // Use 4 bytes for unsigned long
unsigned long totalEngineMinutes = 0; // stores total runtime in minutes
unsigned long lastMinuteUpdate = 0;

// Wifi re-connect variable
unsigned long wifi_previousMillis = 0;
unsigned long wifi_interval = 30000;

// Alert image
const uint8_t image_check_engine[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x7f, 0x87, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xff, 0x00, 0x00, 0x00, 0x3f, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xfe, 0x00, 0x00, 0x00, 0x1f, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xce, 0x70, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xce, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe0, 0xe4, 0x9e, 0x72, 0x41, 0xce, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0x24, 0x90, 0x9a, 0x81, 0xfe, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0x07, 0x9c, 0x83, 0x81, 0xfe, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xe1, 0x07, 0x9c, 0x83, 0x81, 0xfc, 0x18, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xe1, 0x24, 0x90, 0x9a, 0x40, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0xe4, 0x9e, 0x72, 0x60, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0xe9, 0x19, 0x41, 0xc0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0x09, 0x65, 0x61, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0xcd, 0x41, 0x71, 0xc0, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0x0b, 0x4d, 0x59, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0x0b, 0x65, 0x49, 0x00, 0xfc, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe1, 0xe9, 0x39, 0x49, 0xe1, 0xfe, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x18, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xce, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x01, 0xce, 0x38, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xce, 0x70, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x01, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x01, 0xcf, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x01, 0xcf, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

// const GFXglyph customGlyph = { image_data, 128, 64, 128, 0, 0 };
// const GFXfont customFont = { (uint8_t *)image_data, &#038;customGlyph, 32, 127, 64 };

const uint8_t image_oil_change[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x07, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x7f, 0xe0, 0x03, 0x80, 0x00, 0x07, 0xff, 0x1c, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x79, 0xff, 0xff, 0xff, 0xf0, 0x3f, 0xfe, 0x08, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x78, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3c, 0x1c, 0x00, 0x00, 0x1f, 0xe3, 0xe0, 0x04, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3e, 0x1c, 0x00, 0x00, 0x0f, 0x07, 0xc0, 0x0e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x1e, 0x1c, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x1c, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x9c, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xdc, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
};

// const GFXglyph customGlyph = { image_data, 128, 64, 128, 0, 0 };
// const GFXfont customFont = { (uint8_t *)image_data, &#038;customGlyph, 32, 127, 64 };

const uint8_t image_battery[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x07, 0xf0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0c, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x0c, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x08, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x60, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x18, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x10, 0x7c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x30, 0xfc, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x30, 0x0c, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x30, 0x18, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x3f, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x30, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x60, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0xc0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x80, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x03, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t image_clock_error[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x00, 0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x03, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x00, 0x3f, 0xfe, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0xfe, 0x03, 0xff, 0xff, 0xc0, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x0f, 0xff, 0xff, 0xf8, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x3f, 0xff, 0xff, 0xfc, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0xff, 0xfc, 0x3f, 0xff, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0xc1, 0xff, 0x80, 0x01, 0xff, 0x83, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x3f, 0x83, 0xfe, 0x00, 0x00, 0x3f, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x1f, 0x07, 0xf8, 0x00, 0x00, 0x0f, 0xf0, 0xf8, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0e, 0x0f, 0xe0, 0x00, 0x00, 0x03, 0xf8, 0x70, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x06, 0x1f, 0xc0, 0x00, 0x00, 0x01, 0xfc, 0x60, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x01, 0x80, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x01, 0x80, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x01, 0x80, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x01, 0x80, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x01, 0x80, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x01, 0x80, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x01, 0x80, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x01, 0x80, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x01, 0x80, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x01, 0x80, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0x80, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0x80, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x01, 0x80, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x01, 0x80, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x01, 0xc0, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x03, 0xff, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x03, 0xff, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x03, 0xff, 0xff, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x03, 0xff, 0xfe, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x80, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x03, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe7, 0xff, 0xff, 0xf7, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0xff, 0xff, 0x81, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x0f, 0xf8, 0x00, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t image_move_up[] PROGMEM = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x91, 0x11, 0x11, 0x08, 0x88, 0x8b, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9f, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xb9, 0x99, 0x99, 0x99, 0x99, 0x9b, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0x91, 0x10, 0x00, 0x00, 0x00, 0x8b, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};

const uint8_t image_company[] PROGMEM = {
0x00, 0x00, 0x1f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x7f, 0xc0, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xc0, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x01, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x3f, 0xc0, 0x03, 0xf9, 0xff, 0x80, 0xff, 0xff, 0xff, 
0x01, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x3f, 0xc0, 0x0f, 0xff, 0xff, 0x80, 0xff, 0xff, 0xff, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x3f, 0xc0, 0x3f, 0xff, 0xff, 0x81, 0xff, 0xff, 0xfe, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x1f, 0x00, 0x7f, 0x9f, 0xbf, 0xc1, 0xff, 0xe7, 0xce, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3b, 0x83, 0xbc, 0xc7, 0x86, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x3e, 0x01, 0xf8, 0x07, 0x7f, 0xc7, 0xfd, 0xc7, 0x8e, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x3e, 0x01, 0xf0, 0x00, 0x33, 0xc7, 0x3c, 0x0f, 0x80, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x3e, 0x01, 0xf0, 0x00, 0x73, 0xcf, 0x7c, 0x0f, 0x80, 
0x03, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x3c, 0x01, 0xe0, 0x00, 0x73, 0xce, 0x78, 0x0f, 0x00, 
0x01, 0xff, 0xc0, 0x01, 0xff, 0xc0, 0x00, 0x7c, 0x1f, 0xe0, 0x00, 0x73, 0xfe, 0x78, 0x1f, 0x00, 
0x01, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x7c, 0x3f, 0xf0, 0x00, 0xf3, 0xfc, 0xf8, 0x1f, 0x00, 
0x01, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x7c, 0x3f, 0xf0, 0x08, 0xe3, 0xf8, 0xf8, 0x1f, 0x00, 
0x00, 0xff, 0xc0, 0x01, 0xff, 0x80, 0x00, 0x7c, 0x3d, 0xf0, 0x1e, 0xe3, 0xf8, 0xf8, 0x1f, 0x00, 
0x00, 0xff, 0xc0, 0x01, 0xff, 0x00, 0x00, 0x7c, 0x3d, 0xf8, 0x7f, 0xe1, 0xf0, 0xf8, 0x1f, 0x00, 
0x00, 0xff, 0xc0, 0x01, 0xff, 0x00, 0x01, 0xff, 0xf8, 0xff, 0xff, 0xf1, 0xe3, 0xfc, 0x7f, 0x80, 
0x00, 0x7f, 0xc0, 0x01, 0xfe, 0x00, 0x01, 0xff, 0xf8, 0x7f, 0xf7, 0xf1, 0xe7, 0xfc, 0xff, 0x80, 
0x00, 0x3f, 0xc0, 0x01, 0xfe, 0x00, 0x03, 0xff, 0xf8, 0x1f, 0xc7, 0xf1, 0xc7, 0xf8, 0xff, 0x80, 
0x00, 0x3f, 0xc0, 0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x1f, 0xc0, 0x01, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x0f, 0x80, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x02, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0xa9, 0x44, 0x00, 0x10, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xdf, 0xe0, 0xff, 0xff, 0x6b, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xdb, 0xe0, 0xdf, 0xf6, 0xeb, 0xfb, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xe0, 0xff, 0xf6, 0xfa, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0xff, 0xff, 0xfd, 0xb0, 0xc6, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x4f, 0xff, 0xff, 0xf0, 0x46, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x4f, 0xff, 0xff, 0xfc, 0x47, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
};


void saveEngineHours();  // ✅ Add this prototype

// Added on JUne 1,2025
void synchroniseWith_NTP_Time(Stream &src) {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    src.println("Failed to obtain time");
    return;
  }


  getLocalTime(&timeinfo);

  uint32_t yr = timeinfo.tm_year + 1900;
  uint32_t mt = timeinfo.tm_mon + 1;
  uint32_t dy = timeinfo.tm_mday;
  uint32_t hr = timeinfo.tm_hour;
  uint32_t mi = timeinfo.tm_min;
  uint32_t se = timeinfo.tm_sec;

  rtc.adjust(DateTime(yr, mt, dy, hr, mi, se));
  src.println("Sync time with NTP successful.");
  src.println(&timeinfo, "%A, %B %d %Y %H:%M:%S");
}
// Added on May 20,2025 -- To fix large of Hour
void saveMinutesToEEPROM() {
  EEPROM.put(EEPROM_ADDR_TOTAL_MINUTES, totalEngineMinutes);
  EEPROM.commit();
}
void loadMinutesFromEEPROM() {
  EEPROM.get(EEPROM_ADDR_TOTAL_MINUTES, totalEngineMinutes);
}
// ---------------------------------------

void saveMinActiveMs() {
  EEPROM.put(EEPROM_MIN_ACTIVE_ADDR, minActiveMs);
  EEPROM.commit();
}
void loadMinActiveMs() {
  EEPROM.get(EEPROM_MIN_ACTIVE_ADDR, minActiveMs);
  // if (minActiveMs < 50 || minActiveMs > 5000) minActiveMs = 300; // Fallback
}

void saveServerToEEPROM() {
  for (int i = 0; i < MAX_SERVER_LEN; i++) {
    if (i < mqttServer.length()) {
      EEPROM.write(EEPROM_SERVER_ADDR + i, mqttServer[i]);
    } else {
      EEPROM.write(EEPROM_SERVER_ADDR + i, 0);
    }
  }
  EEPROM.commit();
}

void loadServerFromEEPROM() {
  char buf[MAX_SERVER_LEN + 1];
  for (int i = 0; i < MAX_SERVER_LEN; i++) {
    buf[i] = EEPROM.read(EEPROM_SERVER_ADDR + i);
  }
  buf[MAX_SERVER_LEN] = '\0';
  mqttServer = String(buf);
}

void connectWiFi() {
  char ssid[32], pass[32];
  EEPROM.get(SSID_ADDR, ssid);
  EEPROM.get(PASS_ADDR, pass);

  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, pass);
  unsigned long start = millis();
  while (WiFi.status() != WL_CONNECTED && millis() - start < 10000) {
    delay(500);
    Serial.print(".");
  }

  // display.clearDisplay();

if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n✅ WiFi connected!");
  } else {
    Serial.println("\n❌ WiFi connection failed.");

  }

}


void loadSaveInterval() {
  unsigned long intervalSec;
  EEPROM.get(EEPROM_ADDR_INTERVAL, intervalSec);
  if (intervalSec == 0xFFFFFFFF || intervalSec == 0 || intervalSec > 86400) {
    intervalSec = 600; // fallback to default 600 seconds
  }
  SAVE_INTERVAL = intervalSec * 1000UL;
}

void showMessage(const String& message) {
  static bool visible = true;
  static unsigned long lastBlink = 0;
  const unsigned long blinkInterval = 500;  // milliseconds

  unsigned long now = millis();
  if (now - lastBlink >= blinkInterval) {
    visible = !visible;
    lastBlink = now;

    display.clearDisplay();
    display.fillScreen(SSD1306_WHITE);                 // White background

    if (visible) {
      display.setTextColor(SSD1306_BLACK);             // Black text
      display.setTextSize(2);

      int16_t x1, y1;
      uint16_t w, h;
      display.getTextBounds(message, 0, 0, &x1, &y1, &w, &h);

      int16_t x = (display.width() - w) / 2;
      int16_t y = (display.height() - h) / 2;
      display.setCursor(x, y);
      display.print(message);
    }

    display.display();
  }
}


bool isInShift1(uint8_t hour) {
  return (shift1Cutoff <= hour && hour < shift2Cutoff);
}

bool isInShift2(uint8_t hour) {
  return (hour < shift1Cutoff || hour >= shift2Cutoff);
}

void updateEngineHours() {
  unsigned long currentTime = rtc.now().unixtime();
  unsigned long elapsed = currentTime - engineStartTime;
  
  if (elapsed >= 1) {
    float hours = elapsed / 3600.0;
    totalEngineHours += hours;
    totalEngineMinutes = totalEngineHours*60;
    uint8_t currentHour = rtc.now().hour();
    if (isInShift1(currentHour)) shift1Hours += hours;
    else if (isInShift2(currentHour)) shift2Hours += hours;
    engineStartTime = currentTime;
  }
  // // Added on May 20,2025 - For minute
  // if (millis() - lastMinuteUpdate >= 60000) {  // every minute
  //     totalEngineMinutes++;                     // count in minutes
  //     totalEngineHours = totalEngineMinutes/60;
  //     lastMinuteUpdate = millis();
  //     Serial1.print(totalEngineMinutes);
  //     Serial1.print(totalEngineHours);
  //     engineStartTime = currentTime;
  // }
}

void startEngine() {
  engineRunning = true;
  engineStartTime = rtc.now().unixtime();
  lastSaveTime = millis();
}

void stopEngine() {
  if (engineRunning) {
    // updateEngineHours();
    saveEngineHours();
    engineRunning = false;
    digitalWrite(LED_PIN, HIGH);
  }
}

  bool testAndReconnectMQTT(const char* clientId) {
  if (mqttClient.connected()) {
    return true;  // Already connected
  }

  Serial.print("Connecting to MQTT with client ID: ");
  Serial.println(clientId);

  int colIndex = mqttServer.indexOf(':');
  String ipStr = mqttServer.substring(0, colIndex);      // e.g., "192.168.1.100"
  int port = mqttServer.substring(colIndex + 1).toInt(); // e.g., 1883
  mqttClient.setServer(ipStr.c_str(), port);

  bool connected = mqttClient.connect(clientId, "telematic", "lcb12025");

  if (connected) {
    Serial.println("MQTT connection successful.");
  } else {
    Serial.print("MQTT connection failed, rc=");
    Serial.println(mqttClient.state());  // Debug reason code
  }

  return connected;
}

// bool testMQTTConnection(const char* ip, int port) {
//   if (testAndReconnectMQTT(engine_name.c_str())){
//       Serial.println("✅ MQTT connection successful.");
//       mqttClient.disconnect();  // Disconnect after test
//       return true;
//   }else{
//     Serial.print("❌ MQTT connection failed. Error code: ");
//     Serial.println(mqttClient.state());
//     return false;
//   }
// }


// totalMoves++;
// shiftMove1++; // assume shift 1 for now

// Comment on May 1,2025 -- current shift hour did not reset to zero.
// void handleShiftReset(DateTime now) {
//   int currentHour = now.hour();
//   int currentDay = now.day();

//   // --- Shift 1 ---
//   if (currentHour >= shift1Cutoff && lastShift1ResetDay != currentDay) {
//     shift1Hours = 0;
//     EEPROM.put(SHIFT1_HOUR_ADDR, shift1Hours);
//     // move
//     shiftMove1 = 0 ;
//     EEPROM.put(SHIFT_MOVE1_ADDR, shiftMove1);
//     // end move
//     EEPROM.write(LAST_SHIFT1_RESET_DAY_ADDR, currentDay);
//     EEPROM.commit();
//     lastShift1ResetDay = currentDay;
//   }

//   // --- Shift 2 ---
//   if (currentHour >= shift2Cutoff && lastShift2ResetDay != currentDay) {
//     shift2Hours = 0;
//     EEPROM.put(SHIFT2_HOUR_ADDR, shift2Hours);
//     // move
//     shiftMove2 = 0 ;
//     EEPROM.put(SHIFT_MOVE2_ADDR, shiftMove2);
//     // end move
//     EEPROM.write(LAST_SHIFT2_RESET_DAY_ADDR, currentDay);
//     EEPROM.commit();
//     lastShift2ResetDay = currentDay;
//   }
// }

void sendDataToMQTT(const char* topic, const char* payload) {
  int colIndex = mqttServer.indexOf(':');
  String ipStr = mqttServer.substring(0, colIndex);      // e.g., "192.168.1.100"
  int port = mqttServer.substring(colIndex + 1).toInt(); // e.g., 1883

  if (testAndReconnectMQTT(engine_name.c_str())) {
    bool success = mqttClient.publish(topic, payload);
    if (success) {
      Serial.print("MQTT publish success: ");
    } else {
      Serial.print("MQTT publish failed: ");
    }
    Serial.print("topic=");
    Serial.print(topic);
    Serial.print(" payload=");
    Serial.println(payload);
  } else {
    Serial.println("MQTT connection failed. Publish skipped.");
  }
}

void publish_data(){
          // Send Engine Total Hour
        char payload_totalhour[16];
        dtostrf(totalEngineMinutes/60.0, 1, 2, payload_totalhour);  // width=1, precision=2
        String topic_hour = "engine/" + engine_name + "/hour";
        sendDataToMQTT(topic_hour.c_str(),payload_totalhour);

        // Send Engine Total Move
        char payload_totalmove[12]; // Enough for int range
        itoa(totalMoves, payload_totalmove, 10);  // base 10
        String topic_move = "engine/" + engine_name + "/move";
        sendDataToMQTT(topic_move.c_str(),payload_totalmove);

        // Send Engine malfunction
        String topic_malfunction = "engine/" + engine_name + "/malfunction";
        char engineCheckStr[10];  // Make sure the buffer is big enough
        itoa(engine_check, engineCheckStr, 10);  // 10 means base 10 (decimal)
        sendDataToMQTT(topic_malfunction.c_str(),engineCheckStr);
}

void handleShiftReset(DateTime now) {
  int currentHour = now.hour();
  int currentDay = now.day();
  int currentShiftIndex = isInShift1(currentHour) ? 1 : 2;

  // On first run
  if (lastShiftIndex == -1) {
    lastShiftIndex = currentShiftIndex;
    return;
  }

  // Detect transition between shifts
  if (currentShiftIndex != lastShiftIndex) {
    if (currentShiftIndex == 1) {
      shift1Hours = 0;
      EEPROM.put(SHIFT1_HOUR_ADDR, shift1Hours);
      shiftMove1 = 0;
      EEPROM.put(SHIFT_MOVE1_ADDR, shiftMove1);
    } else {
      shift2Hours = 0;
      EEPROM.put(SHIFT2_HOUR_ADDR, shift2Hours);
      shiftMove2 = 0;
      EEPROM.put(SHIFT_MOVE2_ADDR, shiftMove2);
    }
    EEPROM.commit();
    lastShiftIndex = currentShiftIndex;
  }
}

void showEngineFaultScreen() {
  display.clearDisplay();

  // Draw engine icon in center
  int iconX = 0;//(SCREEN_WIDTH - 16) / 2;
  int iconY = 8;
  display.drawBitmap(iconX, iconY, image_check_engine, 128, 64, WHITE);

  display.display();
}

void showOilChangeScreen() {
  display.clearDisplay();
  // Draw engine icon in center
  int iconX = 0;//(SCREEN_WIDTH - 16) / 2;
  int iconY = 8;
  display.drawBitmap(iconX, iconY, image_battery, 128, 64, WHITE);

  display.display();
}

void showAlertScreen(const uint8_t* image, const char* message) {
  display.clearDisplay();

  // Draw image in center
  int iconX = 0;//(SCREEN_WIDTH - 64) / 2;  // Adjust based on image width (e.g., 64)
  int iconY = 0;                        // Top-aligned
  display.drawBitmap(iconX, iconY, image, 128, 64, WHITE);

  // Draw bottom-centered message
  display.setTextSize(1);
  display.setTextColor(WHITE);

  int16_t x1, y1;
  uint16_t w, h;
  display.getTextBounds(message, 0, 0, &x1, &y1, &w, &h);
  int textX = (SCREEN_WIDTH - w) / 2;
  int textY = SCREEN_HEIGHT - h + 1;  // A bit above the bottom
  display.setCursor(textX, textY);
  display.print(message);

  display.display();
}

void updateDisplay(DateTime now,bool showNormalDisplay) {
    
    if (showNormalDisplay){



    display.clearDisplay();
  
    // Line 1: "Running" (if running) and engine name
    display.setTextSize(1);
    display.setCursor(0, 0);
    if (engineRunning) display.print("Run");

    char timeStr[10];
    sprintf(timeStr, "%02d:%02d:%02d", now.hour(), now.minute(), now.second());
    display.setCursor(35, 0);  // adjust X for alignment if needed
    display.print(timeStr);

    display.setCursor(96, 0);
    display.print(engine_name);
  
    // Line 2: Big Total Hour in center
    display.setTextSize(2);
    // char hourStr[12];
    // sprintf(hourStr, "%010.2f", totalEngineHours);
    // int16_t x1, y1; uint16_t w, h;
    // display.getTextBounds(hourStr, 0, 0, &x1, &y1, &w, &h);
    // display.setCursor(SCREEN_WIDTH - w, 25);
    // display.print(hourStr);
    char mainStr[12];
    int16_t x1, y1; uint16_t w, h;
    // if (true) {
      // sprintf(mainStr, "%010.2f", totalEngineHours);
      sprintf(mainStr, "%010.2f", totalEngineMinutes/60.0);
    // } else {
    //   sprintf(mainStr, "%10d", totalMoves); // pad total moves right-aligned
    // }
    display.getTextBounds(mainStr, 0, 0, &x1, &y1, &w, &h);
    display.setCursor(SCREEN_WIDTH - w, 25);
    display.print(mainStr);

    // Show Total move
    char moveStr[12];
    int16_t xm1, ym1; uint16_t wm, hm;
    sprintf(moveStr, "%10d", totalMoves); // pad total moves right-aligned

    display.getTextBounds(mainStr, 0, 0, &xm1, &ym1, &wm, &hm);
    display.setCursor(SCREEN_WIDTH - w, 48);
    display.print(moveStr);
  
    // Last line:
    // Shift Hour (Big) + Time & Shift name (Small)
    // bool inShift1 = isInShift1(now.hour());
    // String shiftLabel = inShift1 ? shift1Name : shift2Name;
    // float currentShiftValue = showHours
    // ? (inShift1 ? shift1Hours : shift2Hours)
    // : (inShift1 ? shiftMove1 : shiftMove2);
  
    // Show shift hour in big font
    // display.setTextSize(2);
    // char shiftValueStr[8];
    // if (showHours) {
    //   sprintf(shiftValueStr, "%.2f", currentShiftValue);
    // } else {
    //   sprintf(shiftValueStr, "%d", (int)currentShiftValue);
    // }
    // display.setCursor(0, 48);
    // display.print(shiftValueStr);
    // display.print(showHours ? "h" : " m");
  
    // Show time and shift name in small font
    // display.setTextSize(1);
    // char timeStr[10];
    // sprintf(timeStr, "%02d:%02d", now.hour(), now.minute());
    // display.setCursor(90, 54);  // adjust X for alignment if needed
    // display.print(timeStr);



  
    display.display();
        }
  }

void blinkLED() {
  static unsigned long lastBlink = 0;
  static bool ledState = false;
  if (millis() - lastBlink >= 500) {
    ledState = !ledState;
    digitalWrite(LED_PIN, ledState ? LOW : HIGH);
    lastBlink = millis();
  }
}

void saveEngineHours() {
  EEPROM.put(ENGINE_HOURS_ADDR, totalEngineHours);
  EEPROM.put(SHIFT1_HOUR_ADDR, shift1Hours);
  EEPROM.put(SHIFT2_HOUR_ADDR, shift2Hours);

  // save move
  EEPROM.put(TOTAL_MOVE_ADDR, totalMoves);
  EEPROM.put(SHIFT_MOVE1_ADDR, shiftMove1);
  EEPROM.put(SHIFT_MOVE2_ADDR, shiftMove2);

  // Added May 20,2025
  EEPROM.put(EEPROM_ADDR_TOTAL_MINUTES, totalEngineMinutes);

  EEPROM.commit();
}

float readFloat(int addr) {
  float val;
  EEPROM.get(addr, val);
  return (isnan(val) || val < 0) ? 0.0 : val;
}

String readName() {
  char buf[MAX_NAME_LENGTH + 1];
  for (int i = 0; i < MAX_NAME_LENGTH; i++) buf[i] = EEPROM.read(NAME_ADDR + i);
  buf[MAX_NAME_LENGTH] = '\0';
  return String(buf);
}

bool writeName(String name) {
  for (int i = 0; i < MAX_NAME_LENGTH; i++) EEPROM.write(NAME_ADDR + i, name[i]);
  bool ok = EEPROM.commit();
  engine_name = name;
  return ok;
}

String readShiftName(int addr) {
  char buf[MAX_NAME_LENGTH + 1];
  for (int i = 0; i < MAX_NAME_LENGTH; i++) buf[i] = EEPROM.read(addr + i);
  buf[MAX_NAME_LENGTH] = '\0';
  return String(buf);
}

void writeShiftName(int addr, String name) {
  for (int i = 0; i < MAX_NAME_LENGTH; i++) EEPROM.write(addr + i, name[i]);
  EEPROM.commit();
}

void clearEEPROM() {
  if (engineRunning) {
    Serial.println("Stop engine before clearing EEPROM");
    return;
  }
  for (int i = 0; i < EEPROM_SIZE; i++) EEPROM.write(i, 0xFF);
  EEPROM.commit();
  totalEngineHours = 0;
  totalEngineMinutes = 0;
  totalMoves = 0;
  // dailyEngineHours = 0;
  Serial.println("EEPROM cleared and hours reset");
}

void set_time(String input) {
  input.remove(0, 8);
  int yyyy = input.substring(0, 4).toInt();
  int mm = input.substring(5, 7).toInt();
  int dd = input.substring(8, 10).toInt();
  int hh = input.substring(11, 13).toInt();
  int min = input.substring(14, 16).toInt();
  int ss = input.substring(17, 19).toInt();
  rtc.adjust(DateTime(yyyy, mm, dd, hh, min, ss));
  Serial.println("Time set.");
}

void show_time(Stream &out) {
  DateTime now = rtc.now();
  out.printf("%04d/%02d/%02d %02d:%02d:%02d\n",
                now.year(), now.month(), now.day(),
                now.hour(), now.minute(), now.second());
}

void saveMovesToEEPROM() {
  EEPROM.put(TOTAL_MOVE_ADDR, totalMoves);
  EEPROM.put(SHIFT_MOVE1_ADDR, shiftMove1);
  EEPROM.put(SHIFT_MOVE2_ADDR, shiftMove2);
  // Serial.print("Total move :");
  // Serial.println(totalMoves);
  // Serial.print("Shift1 move :");
  // Serial.println(shiftMove1);
  // Serial.print("Shift2 move :");
  // Serial.println(shiftMove2);
  EEPROM.commit();
}

void connectToMQTT() {
  if (!mqttClient.connected()) {
    Serial.print("Connecting to MQTT...");
    if (mqttClient.connect(engine_name.c_str(),"telematic","lcb12025")) {
      Serial.println("connected");
    } else {
      Serial.print("failed, rc=");
      Serial.print(mqttClient.state());
      Serial.println(" try again in 5 seconds");
    }
  }
}

void handleSerialCommand(String cmd, Stream &src) {
  if (cmd == "1") startEngine();
  else if (cmd == "0") stopEngine();
  else if (cmd == "hour") src.println(totalEngineMinutes/60.0, 2);
  else if (cmd.startsWith("sethour")) {
    // totalEngineHours = cmd.substring(8).toFloat();
    // EEPROM.put(ENGINE_HOURS_ADDR, totalEngineHours);
    // totalEngineMinutes = totalEngineHours * 60; 
    // EEPROM.get(EEPROM_ADDR_TOTAL_MINUTES, totalEngineMinutes);
    // EEPROM.commit();
    // src.print("Set hour: "); src.println(totalEngineMinutes/60.0, 2);
      totalEngineHours = cmd.substring(8).toFloat();
      totalEngineMinutes = totalEngineHours * 60;

      EEPROM.put(ENGINE_HOURS_ADDR, totalEngineHours);
      EEPROM.put(EEPROM_ADDR_TOTAL_MINUTES, totalEngineMinutes);  // fix this line
      EEPROM.commit();

      src.print("Set hour: ");
      src.println(totalEngineMinutes / 60.0, 2);
  }
  else if (cmd == "name") src.println(engine_name);
  else if (cmd.startsWith("setname")) writeName(cmd.substring(8, 18));
  else if (cmd == "cutoff") {
    src.printf("Shift1 cutoff: %02d\n", shift1Cutoff);
    src.printf("Shift2 cutoff: %02d\n", shift2Cutoff);
  }
  else if (cmd.startsWith("setcutoff1")) {
    shift1Cutoff = cmd.substring(11).toInt();
    EEPROM.write(SHIFT1_CUTOFF_ADDR, shift1Cutoff);
    EEPROM.commit();
    src.printf("Set shift1 cutoff: %02d\n", shift1Cutoff);
  }
  else if (cmd.startsWith("setcutoff2")) {
    shift2Cutoff = cmd.substring(11).toInt();
    EEPROM.write(SHIFT2_CUTOFF_ADDR, shift2Cutoff);
    EEPROM.commit();
    src.printf("Set shift2 cutoff: %02d\n", shift2Cutoff);
  }
  else if (cmd == "shifthour1") src.println(shift1Hours, 2);
  else if (cmd == "shifthour2") src.println(shift2Hours, 2);
  else if (cmd == "shiftname1") src.println(shift1Name);
  else if (cmd == "shiftname2") src.println(shift2Name);
  else if (cmd.startsWith("setshiftname1")) {
    shift1Name = cmd.substring(14, 24);
    writeShiftName(SHIFT1_NAME_ADDR, shift1Name);
    src.print("Set shift1 name: ");
    src.println(shift1Name);
  }
  else if (cmd.startsWith("setshiftname2")) {
    shift2Name = cmd.substring(14, 24);
    writeShiftName(SHIFT2_NAME_ADDR, shift2Name);
    src.print("Set shift2 name: ");
    src.println(shift2Name);
  }
  else if (cmd == "clear") clearEEPROM();
  else if (cmd == "time") show_time(src);
  else if (cmd.startsWith("settime")) {
    String param = cmd.substring(8);
    if (param.length() > 0) {
      set_time(cmd);
    } else{
      synchroniseWith_NTP_Time(src);
    }
  }
  else if (cmd == "interval") {
    src.printf("Current save interval: %lu seconds\n", SAVE_INTERVAL / 1000UL);
  }
  else if (cmd.startsWith("setinterval ")) {
    unsigned long sec = cmd.substring(12).toInt();
    if (sec > 0 && sec <= 86400) {
      SAVE_INTERVAL = sec * 1000UL;
      EEPROM.put(EEPROM_ADDR_INTERVAL, sec);
      EEPROM.commit();
      src.printf("Save interval set to: %lu seconds\n", sec);
    } else {
      src.println("Invalid value. Use 1–86400 seconds.");
    }
  }
  else if (cmd == "wifi") {
    if (WiFi.status() == WL_CONNECTED) {
      src.println("📶 SSID: " + WiFi.SSID());
      src.println("🔗 Status: Connected");
      src.println("🌐 IP: " + WiFi.localIP().toString());
    } else {
      src.println("📶 SSID: (not connected)");
      src.println("🔗 Status: Not Connected");
    }
  } //end cmd.startsWith("wifi")
  // 
  else if (cmd.startsWith("setwifi")) {
    int firstSpace = cmd.indexOf(' ');
    int secondSpace = cmd.indexOf(' ', firstSpace + 1);
    if (firstSpace != -1 && secondSpace != -1) {
      String ssid = cmd.substring(firstSpace + 1, secondSpace);
      String pass = cmd.substring(secondSpace + 1);
      src.println("Saving WiFi credentials...");

      char ssidBuf[32], passBuf[32];
      ssid.toCharArray(ssidBuf, 32);
      pass.toCharArray(passBuf, 32);

      EEPROM.put(SSID_ADDR, ssidBuf);
      EEPROM.put(PASS_ADDR, passBuf);
      EEPROM.commit();

      src.println("✅ Reconnecting...");
      connectWiFi();
    } else {
      src.println("Usage: setwifi SSID PASSWORD");
    }
  } else if (cmd == "wifi list") {
    src.println("Scanning Wi-Fi networks...");
    WiFi.mode(WIFI_STA);
    WiFi.disconnect();
    delay(100);
    int n = WiFi.scanNetworks();
    if (n == 0) {
      src.println("No networks found.");
    } else {
      src.printf("%d networks found:\n", n);
      for (int i = 0; i < n; ++i) {
        src.printf("%d: %s (%d dBm) %s\n", i + 1,
          WiFi.SSID(i).c_str(),
          WiFi.RSSI(i),
          (WiFi.encryptionType(i) == WIFI_AUTH_OPEN) ? "Open" : "Secured");
      }
    }
  } //ip
  
  // MOve
  else if (cmd == "move") {
    src.printf("%d", totalMoves);
  } else if (cmd.startsWith("setmove ")) {
    int newValue = cmd.substring(8).toInt();
    totalMoves = newValue;
    saveMovesToEEPROM();
    src.println("Total move updated.");
  } else if (cmd == "shiftmove1") {
    src.printf("Shift 1 Move: %d\n", shiftMove1);
  } else if (cmd.startsWith("setshiftmove1 ")) {
    int newValue = cmd.substring(14).toInt();
    shiftMove1 = newValue;
    saveMovesToEEPROM();
    src.println("Shift 1 move updated.");
  } else if (cmd == "shiftmove2") {
    src.printf("Shift 2 Move: %d\n", shiftMove2);
  } else if (cmd.startsWith("setshiftmove2 ")) {
    int newValue = cmd.substring(14).toInt();
    shiftMove2 = newValue;
    saveMovesToEEPROM();
    src.println("Shift 2 move updated.");
  }
  //End move
  else if (cmd == "mqtt") {
    src.print("MQTT Server: ");
    src.println(mqttServer);
    bool result = testAndReconnectMQTT(engine_name.c_str());
    src.println(result ? "✅ MQTT Connected" : "MQTT connection failed");
  }
  else if (cmd.startsWith("setmqtt ")) {
    String newServer = cmd.substring(8);
    if (newServer.length() < MAX_SERVER_LEN && newServer.indexOf(':') != -1) {
      mqttServer = newServer;
      saveServerToEEPROM();
      src.print("MQTT Server set to: ");
      src.println(mqttServer);
      bool result = testAndReconnectMQTT(engine_name.c_str());
      src.println(result ? "✅ MQTT Connected" : "MQTT connection failed");
    } else {
      src.println("Invalid format. Use setserver <ip>:<port>");
    }
  }//end MTTQ
  else if (cmd == "mqttinterval") {
    src.print("MQTT Interval (sec): ");
    src.println(mqttSendInterval/1000);
  } else if (cmd.startsWith("setmqttinterval ")) {
    String param = cmd.substring(16);
    mqttSendInterval = param.toInt() * 1000UL;
    src.print("MQTT Interval set to ");
    src.print(mqttSendInterval/1000);
    src.println(" sec");
  } else if (cmd == "testmqtt") {
    int colIndex = mqttServer.indexOf(':');
    if (colIndex > 0) {
      bool result = testAndReconnectMQTT(engine_name.c_str());
      src.println(result ? "MQTT test passed" : "MQTT test failed");
    } else {
      src.println("Invalid MQTT server format. Use <ip>:<port>");
    }
  } else if (cmd.startsWith("pm ")){
    isPm = false;
    alertMsg = "";
    String msg = cmd.substring(3);
    if (msg.length() > 1){
        isPm = true;
        alertMsg = msg;
    }
  } else if (cmd == "minactive") {
    src.print("🕒 Min active duration: ");
    src.print(minActiveMs/1000);
    src.println(" s");
  }
  else if (cmd.startsWith("setminactive")) {
    int spaceIndex = cmd.indexOf(' ');
    if (spaceIndex != -1) {
      String valueStr = cmd.substring(spaceIndex + 1);
      int newMs = valueStr.toInt();

      minActiveMs = newMs*1000;
      saveMinActiveMs();
      Serial.print("✅ Set min active to ");
      Serial.print(minActiveMs/1000);
      Serial.println(" s");

    }
  }
  
  
}

  void setup() {
    if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
      Serial.println("SSD1306 OLED failed");
      while (1);
    }
    display.clearDisplay();
    display.display();

    Serial.begin(115200);
    Wire.begin();
    
    // Set Port mode
    pinMode(LED_PIN, OUTPUT);
    pinMode(ENGINE_INPUT_PIN, INPUT_PULLUP); //for Hour
    pinMode(MOVE_INPUT_PIN, INPUT_PULLDOWN); //for move
    pinMode(CHECK_ENGINE_INPUT_PIN,INPUT_PULLDOWN);//for Display mode UP=Hour,DOWN=Move
  
    EEPROM.begin(EEPROM_SIZE);

    showAlertScreen(image_company,"LOADING.....");
    
    connectWiFi();

    loadSaveInterval();
  
    if (!rtc.begin()) {
      Serial.println("RTC not found!");
      rtcAvailable = false;
    }
  

  
    engine_name = readName();
    totalEngineHours = readFloat(ENGINE_HOURS_ADDR);
    shift1Cutoff = EEPROM.read(SHIFT1_CUTOFF_ADDR);
    shift2Cutoff = EEPROM.read(SHIFT2_CUTOFF_ADDR);
    shift1Hours = readFloat(SHIFT1_HOUR_ADDR);
    shift2Hours = readFloat(SHIFT2_HOUR_ADDR);
    lastShiftResetDay = EEPROM.read(LAST_SHIFT_RESET_DAY_ADDR);
    shift1Name = readShiftName(SHIFT1_NAME_ADDR);
    shift2Name = readShiftName(SHIFT2_NAME_ADDR);
  
    lastShift1ResetDay = EEPROM.read(LAST_SHIFT1_RESET_DAY_ADDR);//EEPROM.get(LAST_SHIFT1_RESET_DAY_ADDR, lastShift1ResetDay);
    lastShift2ResetDay = EEPROM.read(LAST_SHIFT2_RESET_DAY_ADDR);//EEPROM.get(LAST_SHIFT2_RESET_DAY_ADDR, lastShift2ResetDay);
  
    // MOve
    EEPROM.get(TOTAL_MOVE_ADDR, totalMoves);
    EEPROM.get(SHIFT_MOVE1_ADDR, shiftMove1);
    EEPROM.get(SHIFT_MOVE2_ADDR, shiftMove2);
    // End move
  
    // Added May 20,2025 -- To fix large of Hour
    loadMinutesFromEEPROM();
    lastMinuteUpdate = millis();

    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);

    // For Enable Bluetooth
    SerialBT.begin(engine_name);  // Bluetooth name (visible on devices)
    Serial.println("Bluetooth started! Waiting for connections...");
    
    // for MTTQ
    loadServerFromEEPROM();

    WiFiClient espClient;
    PubSubClient mqttClient(espClient);
    // Stored MQTT server info
    int commaIndex = mqttServer.indexOf(':');
    // char mqttIp[32] = "192.168.1.101";//mqttServer.substring(0,commaIndex).toChar();
    // int mqttPort = 1883;//mqttServer.substring(commaIndex).toInt();
    // mqttServer
    mqttClient.setServer(mqttIp, mqttPort);
    publish_data();

    // Load min active for Move
    loadMinActiveMs();

    // // NTP datetime start
    // timeClient.begin();
    // // Set offset time in seconds to adjust for your timezone, for example:
    // // GMT +1 = 3600
    // // GMT +8 = 28800
    // // GMT -1 = -3600
    // // GMT 0 = 0
    // timeClient.setTimeOffset(3600*7);//GMT+7
    // Init and get time
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
    synchroniseWith_NTP_Time(Serial);
  }

// Counting Move
void checkMoveInput() {
  bool reading = digitalRead(MOVE_INPUT_PIN);

  // Debounce handling
  if (reading != lastMoveButtonState) {
    lastDebounceTime = millis();
  }

  if ((millis() - lastDebounceTime) > DEBOUNCE_DELAY_MS) {
    // If stable reading and changed
    if (reading != moveButtonState) {
      moveButtonState = reading;

      if (moveButtonState == HIGH) {
        highStartTime = millis(); // Start timing the HIGH state
        highStable = true;
        isLifting = true;         // ✅ Set AFTER debounce confirmed HIGH
      }
      else if (moveButtonState == LOW && highStable) {
        // Check how long it stayed HIGH
        if (millis() - highStartTime >= minActiveMs) {
          // Check if engine running then increase moving
          if (engineRunning) {
            totalMoves++;
            uint8_t currentHour = rtc.now().hour();
            if (isInShift1(currentHour)) shiftMove1++;
            else if (isInShift2(currentHour)) shiftMove2++;
            saveMovesToEEPROM();
          }//end check engingRunning

          isLifting = false;
          // digitalWrite(LED_PIN, HIGH);
          // flashActive = true;
          // flashStartTime = millis();
        }
        highStable = false;  // Reset
        isLifting = false;        // ✅ End lifting after LOW
      }
    }
  }

  lastMoveButtonState = reading;
}
// End Counting Move

void loop() {

    // Reconnect Wifi.
    unsigned long currentMillis = millis();
    // if WiFi is down, try reconnecting every CHECK_WIFI_TIME seconds
    if ((WiFi.status() != WL_CONNECTED) && (currentMillis - wifi_previousMillis >= wifi_interval)) {
      // Serial.print(millis());
      Serial.println("Reconnecting to WiFi...");
      WiFi.disconnect();
      WiFi.reconnect();
      wifi_previousMillis = currentMillis;
    }
    // end reconnect wifi

    if (!rtcAvailable) {
      // showMessage("No Clock");
      showAlertScreen(image_clock_error,"Clock Error!");
      delay(1000);
      return;
    }

    DateTime now = rtc.now();
    handleShiftReset(now);

    // Check Engine alarm
    bool isCheckEngine = digitalRead(CHECK_ENGINE_INPUT_PIN);
    engine_check = isCheckEngine ? 1 : 0; //to send to MQTT


    // If fou d any problem , Display will change to Alert mode
    if(isCheckEngine || isPm || isChargeFail || isLifting){
      alertDisplay = true;
    }else{
      alertDisplay = false;
    }

    if (isCheckEngine){
      showAlertScreen(image_check_engine,"CHECK ENGINE");
    }
    if (isPm){
      showAlertScreen(image_oil_change,alertMsg.c_str());
    }

    // End Check engine alarm

    // Handle Move count
    checkMoveInput();
    if (isLifting){
      showAlertScreen(image_move_up,"LIFTING");
    }
    
    // Added on May 20,2025 -- Counting in minute
    if (engineRunning && millis() - lastMinuteUpdate >= 60000) {
      totalEngineMinutes++;
      totalEngineHours = totalEngineMinutes /60.0;
      // saveMinutesToEEPROM();
      Serial.println("Minute logged: " + String(totalEngineMinutes));
      lastMinuteUpdate = millis();  // Reset timer
    }

    // Standard display
    updateDisplay(now,!alertDisplay);
  
    bool engineSignal = digitalRead(ENGINE_INPUT_PIN) == LOW;
    if (engineSignal && !engineRunning) startEngine();
    else if (!engineSignal && engineRunning) {
      stopEngine();
    }
  
  
    if (engineRunning) {
      blinkLED();
      // updateEngineHours();
      if (millis() - lastSaveTime >= SAVE_INTERVAL) {
        saveEngineHours();
        lastSaveTime = millis();
      }
    }
  
    // if (millis() - lastDisplayUpdate >= DISPLAY_UPDATE_INTERVAL) {
    //   updateDisplay(now,!alertDisplay);
    //   lastDisplayUpdate = millis();
    // }
  
    if (Serial.available()) {
      String cmd = Serial.readStringUntil('\n');
      cmd.trim();
      handleSerialCommand(cmd,Serial);
    }
    // To support Bluetooth
    if (SerialBT.available()) {
      String cmd = SerialBT.readStringUntil('\n');
      cmd.trim();
      handleSerialCommand(cmd,SerialBT);
    }

    // Non-blocking MQTT send
    if (millis() - lastMQTTSendTime >= mqttSendInterval) {
      if (WiFi.status() == WL_CONNECTED) {
        // Send Engine Total Hour
        publish_data();
      } else {
        // Optional: Retry MQTT connection here (or just skip)
        Serial.println("MQTT/WiFi unavailable. Skipping send.");
      }
      lastMQTTSendTime = millis();
    }

    mqttClient.loop();  // Safe to call even if not connected

  }